[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/consent-string.js",
    "content": "const { encodeConsentString } = require('./encode');\nconst { decodeConsentString } = require('./decode');\n\n/**\n * Regular expression for validating\n */\nconst consentLanguageRegexp = /^[a-z]{2}$/;\n\nexport default class ConsentString {\n  /**\n   * Initialize a new ConsentString object\n   *\n   * @param {string} baseString An existing consent string to parse and use for our initial values\n   */\n  constructor(baseString = null) {\n    this.created = new Date();\n    this.lastUpdated = new Date();\n\n    /**\n     * Version number of consent string specification\n     *\n     * @type {integer}\n     */\n    this.version = 1;\n\n    /**\n     * Vendor list\n     *\n     * @type {object} Vendor list with format from https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/Draft_for_Public_Comment_Transparency%20%26%20Consent%20Framework%20-%20cookie%20and%20vendor%20list%20format%20specification%20v1.0a.pdf\n     */\n    this.vendorList = null;\n\n    /**\n     * Version of the vendor list used for the purposes and vendors\n     *\n     * @type {integer}\n     */\n    this.vendorListVersion = null;\n\n    /**\n     * The unique ID of the CMP that last modified the consent string\n     *\n     * @type {integer}\n     */\n    this.cmpId = null;\n\n    /**\n     * Version of the code used by the CMP when collecting consent\n     *\n     * @type {integer}\n     */\n    this.cmpVersion = null;\n\n    /**\n     * ID of the screen used by CMP when collecting consent\n     *\n     * @type {integer}\n     */\n    this.consentScreen = null;\n\n    /**\n     * Language that the CMP asked consent in\n     *\n     * @type {string} Two-letter ISO639-1 code (en, fr, de, etc.)\n     */\n    this.consentLanguage = null;\n\n    /**\n     * List of purpose IDs that the user has given consent to\n     *\n     * @type {integer[]}\n     */\n    this.allowedPurposeIds = [];\n\n    /**\n     * List of vendor IDs that the user has given consent to\n     *\n     * @type {integer[]}\n     */\n    this.allowedVendorIds = [];\n\n    // Decode the base string\n    if (baseString) {\n      Object.assign(this, decodeConsentString(baseString));\n    }\n  }\n\n  /**\n   * Get the web-safe, base64-encoded consent string\n   *\n   * @return {string} Web-safe, base64-encoded consent string\n   */\n  getConsentString(updateDate = true) {\n    if (!this.vendorList) {\n      throw new Error('ConsentString - A vendor list is required to encode a consent string');\n    }\n\n    if (updateDate === true) {\n      this.lastUpdated = new Date();\n    }\n\n    return encodeConsentString({\n      version: this.getVersion(),\n      vendorList: this.vendorList,\n      allowedPurposeIds: this.allowedPurposeIds,\n      allowedVendorIds: this.allowedVendorIds,\n      created: this.created,\n      lastUpdated: this.lastUpdated,\n      cmpId: this.cmpId,\n      cmpVersion: this.cmpVersion,\n      consentScreen: this.consentScreen,\n      consentLanguage: this.consentLanguage,\n      vendorListVersion: this.vendorListVersion,\n    });\n  }\n\n  /**\n   * Get the version number that this consent string specification adheres to\n   *\n   * @return {integer} Version number of consent string specification\n   */\n  getVersion() {\n    return this.version;\n  }\n\n  /**\n   * Get the version of the vendor list\n   *\n   * @return {integer} Vendor list version\n   */\n  getVendorListVersion() {\n    return this.vendorListVersion;\n  }\n\n  /**\n   * Set the vendors list to use when generating the consent string\n   *\n   * The expected format is the one from https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/Draft_for_Public_Comment_Transparency%20%26%20Consent%20Framework%20-%20cookie%20and%20vendor%20list%20format%20specification%20v1.0a.pdf\n   *\n   * @param {object} vendorList Vendor list with format from https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/Draft_for_Public_Comment_Transparency%20%26%20Consent%20Framework%20-%20cookie%20and%20vendor%20list%20format%20specification%20v1.0a.pdf\n   */\n  setGlobalVendorList(vendorList) {\n    if (\n      typeof vendorList !== 'object'\n      || !vendorList.version\n      || !Array.isArray(vendorList.purposes)\n      || !Array.isArray(vendorList.vendors)\n    ) {\n      // The provided vendor list does not look valid\n      throw new Error('ConsentString - The provided vendor list does not respect the schema from the IAB EU’s GDPR Consent and Transparency Framework');\n    }\n\n    if (vendorList.version !== 1) {\n      // We only support the version 1 of the format for now\n      throw new Error('ConsentString - This version of the Consent String library only supports the Consent String format');\n    }\n\n    this.vendorList = vendorList;\n    this.vendorListVersion = vendorList.version;\n  }\n\n  /**\n   * Set the ID of the Consent Management Platform that last modified the consent string\n   *\n   * Every CMP is assigned a unique ID by the IAB EU that must be provided here before changing any other value in the consent string.\n   *\n   * @param {integer} id CMP ID\n   */\n  setCmpId(id) {\n    this.cmpId = id;\n  }\n\n  /**\n   * Get the ID of the Consent Management Platform from the consent string\n   *\n   * @return {integer}\n   */\n  getCmpId() {\n    return this.cmpId;\n  }\n\n  /**\n   * Set the version of the Consent Management Platform that last modified the consent string\n   *\n   * This version number references the CMP code running when collecting the user consent.\n   *\n   * @param {integer} version Version\n   */\n  setCmpVersion(version) {\n    this.cmpVersion = version;\n  }\n\n  /**\n   * Get the verison of the Consent Management Platform that last modified the consent string\n   *\n   * @return {integer}\n   */\n  getCmpVersion() {\n    return this.cmpVersion;\n  }\n\n  /**\n   * Set the Consent Management Platform screen ID that collected the user consent\n   *\n   * This screen ID references a unique view in the CMP that was displayed to the user to collect consent\n   *\n   * @param {*} screenId Screen ID\n   */\n  setConsentScreen(screenId) {\n    this.consentScreen = screenId;\n  }\n\n  /**\n   * Get the Consent Management Platform screen ID that collected the user consent\n   *\n   * @return {integer}\n   */\n  getConsentScreen() {\n    return this.consentScreen;\n  }\n\n  /**\n   * Set the language that the CMP asked the consent in\n   *\n   * @param {string} language Two-letter ISO639-1 code (en, fr, de, etc.)\n   */\n  setConsentLanguage(language) {\n    if (consentLanguageRegexp.test(language) === false) {\n      throw new Error('ConsentString - The consent language must be a two-letter ISO639-1 code (en, fr, de, etc.)');\n    }\n\n    this.consentLanguage = language;\n  }\n\n  /**\n   * Get the language that the CMP asked consent in\n   *\n   * @return {string} Two-letter ISO639-1 code (en, fr, de, etc.)\n   */\n  getConsentLanguage() {\n    return this.consentLanguage;\n  }\n\n  /**\n   * Set the list of purpose IDs that the user has given consent to\n   *\n   * @param {integer[]} purposeIds An array of integers that map to the purposes defined in the vendor list. Purposes included in the array are purposes that the user has given consent to\n   */\n  setPurposesAllowed(purposeIds) {\n    this.allowedPurposeIds = purposeIds;\n  }\n\n  /**\n   * Get the list of purpose IDs that the user has given consent to\n   *\n   * @return {integer[]}\n   */\n  getPurposesAllowed() {\n    return this.allowedPurposeIds;\n  }\n\n  /**\n   * Set the consent status of a user for a given purpose\n   *\n   * @param {integer} purposeId The ID (from the vendor list) of the purpose to update\n   * @param {boolean} value Consent status\n   */\n  setPurposeAllowed(purposeId, value) {\n    const purposeIndex = this.allowedPurposeIds.indexOf(purposeId);\n\n    if (value === true) {\n      if (purposeIndex === -1) {\n        this.allowedPurposeIds.push(purposeId);\n      }\n    } else if (value === false) {\n      if (purposeIndex !== -1) {\n        this.allowedPurposeIds.splice(purposeIndex);\n      }\n    }\n  }\n\n  /**\n   * Check if the user has given consent for a specific purpose\n   *\n   * @param {integer} purposeId\n   *\n   * @return {boolean}\n   */\n  isPurposeAllowed(purposeId) {\n    return this.purposes.indexOf(purposeId) !== -1;\n  }\n\n  /**\n   * Set the list of vendor IDs that the user has given consent to\n   *\n   * @param {integer[]} vendorIds An array of integers that map to the vendors defined in the vendor list. Vendors included in the array are vendors that the user has given consent to\n   */\n  setVendorsAllowed(vendorIds) {\n    this.allowedVendorIds = vendorIds;\n  }\n\n  /**\n   * Get the list of vendor IDs that the user has given consent to\n   *\n   * @return {integer[]}\n   */\n  getVendorsAllowed() {\n    return this.allowedVendorIds;\n  }\n\n  /**\n   * Set the consent status of a user for a given vendor\n   *\n   * @param {integer} vendorId The ID (from the vendor list) of the vendor to update\n   * @param {boolean} value Consent status\n   */\n  setVendorAllowed(vendorId, value) {\n    const vendorIndex = this.allowedVendorIds.indexOf(vendorId);\n\n    if (value === true) {\n      if (vendorIndex === -1) {\n        this.allowedVendorIds.push(vendorId);\n      }\n    } else if (value === false) {\n      if (vendorIndex !== -1) {\n        this.allowedVendorIds.splice(vendorIndex);\n      }\n    }\n  }\n\n  /**\n   * Check if the user has given consent for a specific vendor\n   *\n   * @param {integer} vendorId\n   *\n   * @return {boolean}\n   */\n  isVendorAllowed(vendorId) {\n    return this.allowedVendorIds.indexOf(vendorId) !== -1;\n  }\n}\n\nmodule.exports = {\n  ConsentString,\n};\n",
    "static": true,
    "longname": "C:/Users/Jawad/Documents/Development/didomi/consent-string/src/consent-string.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "encodeConsentString",
    "memberof": "src/consent-string.js",
    "static": true,
    "longname": "src/consent-string.js~encodeConsentString",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/consent-string.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "decodeConsentString",
    "memberof": "src/consent-string.js",
    "static": true,
    "longname": "src/consent-string.js~decodeConsentString",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/consent-string.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "consentLanguageRegexp",
    "memberof": "src/consent-string.js",
    "static": true,
    "longname": "src/consent-string.js~consentLanguageRegexp",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/consent-string.js",
    "importStyle": null,
    "description": "Regular expression for validating",
    "lineNumber": 7,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "ConsentString",
    "memberof": "src/consent-string.js",
    "static": true,
    "longname": "src/consent-string.js~ConsentString",
    "access": "public",
    "export": true,
    "importPath": "consent-string/src/consent-string.js",
    "importStyle": "ConsentString",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 53,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#constructor",
    "access": "public",
    "description": "Initialize a new ConsentString object",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "baseString",
        "description": "An existing consent string to parse and use for our initial values"
      }
    ]
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "created",
    "memberof": "src/consent-string.js~ConsentString",
    "static": false,
    "longname": "src/consent-string.js~ConsentString#created",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "lastUpdated",
    "memberof": "src/consent-string.js~ConsentString",
    "static": false,
    "longname": "src/consent-string.js~ConsentString#lastUpdated",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "version",
    "memberof": "src/consent-string.js~ConsentString",
    "static": false,
    "longname": "src/consent-string.js~ConsentString#version",
    "access": "public",
    "description": "Version number of consent string specification",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "vendorList",
    "memberof": "src/consent-string.js~ConsentString",
    "static": false,
    "longname": "src/consent-string.js~ConsentString#vendorList",
    "access": "public",
    "description": "Vendor list",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "vendorListVersion",
    "memberof": "src/consent-string.js~ConsentString",
    "static": false,
    "longname": "src/consent-string.js~ConsentString#vendorListVersion",
    "access": "public",
    "description": "Version of the vendor list used for the purposes and vendors",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "cmpId",
    "memberof": "src/consent-string.js~ConsentString",
    "static": false,
    "longname": "src/consent-string.js~ConsentString#cmpId",
    "access": "public",
    "description": "The unique ID of the CMP that last modified the consent string",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "cmpVersion",
    "memberof": "src/consent-string.js~ConsentString",
    "static": false,
    "longname": "src/consent-string.js~ConsentString#cmpVersion",
    "access": "public",
    "description": "Version of the code used by the CMP when collecting consent",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "consentScreen",
    "memberof": "src/consent-string.js~ConsentString",
    "static": false,
    "longname": "src/consent-string.js~ConsentString#consentScreen",
    "access": "public",
    "description": "ID of the screen used by CMP when collecting consent",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "consentLanguage",
    "memberof": "src/consent-string.js~ConsentString",
    "static": false,
    "longname": "src/consent-string.js~ConsentString#consentLanguage",
    "access": "public",
    "description": "Language that the CMP asked consent in",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "allowedPurposeIds",
    "memberof": "src/consent-string.js~ConsentString",
    "static": false,
    "longname": "src/consent-string.js~ConsentString#allowedPurposeIds",
    "access": "public",
    "description": "List of purpose IDs that the user has given consent to",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "integer[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "allowedVendorIds",
    "memberof": "src/consent-string.js~ConsentString",
    "static": false,
    "longname": "src/consent-string.js~ConsentString#allowedVendorIds",
    "access": "public",
    "description": "List of vendor IDs that the user has given consent to",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "integer[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "getConsentString",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#getConsentString",
    "access": "public",
    "description": "Get the web-safe, base64-encoded consent string",
    "lineNumber": 93,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Web-safe, base64-encoded consent string"
    },
    "params": [
      {
        "name": "updateDate",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ]
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "getVersion",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#getVersion",
    "access": "public",
    "description": "Get the version number that this consent string specification adheres to",
    "lineNumber": 122,
    "return": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": "Version number of consent string specification"
    },
    "params": []
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "getVendorListVersion",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#getVendorListVersion",
    "access": "public",
    "description": "Get the version of the vendor list",
    "lineNumber": 131,
    "return": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": "Vendor list version"
    },
    "params": []
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "setGlobalVendorList",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#setGlobalVendorList",
    "access": "public",
    "description": "Set the vendors list to use when generating the consent string\n\nThe expected format is the one from https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/Draft_for_Public_Comment_Transparency%20%26%20Consent%20Framework%20-%20cookie%20and%20vendor%20list%20format%20specification%20v1.0a.pdf",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "vendorList",
        "description": "Vendor list with format from https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/Draft_for_Public_Comment_Transparency%20%26%20Consent%20Framework%20-%20cookie%20and%20vendor%20list%20format%20specification%20v1.0a.pdf"
      }
    ],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "setCmpId",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#setCmpId",
    "access": "public",
    "description": "Set the ID of the Consent Management Platform that last modified the consent string\n\nEvery CMP is assigned a unique ID by the IAB EU that must be provided here before changing any other value in the consent string.",
    "lineNumber": 169,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "CMP ID"
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "getCmpId",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#getCmpId",
    "access": "public",
    "description": "Get the ID of the Consent Management Platform from the consent string",
    "lineNumber": 178,
    "return": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "setCmpVersion",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#setCmpVersion",
    "access": "public",
    "description": "Set the version of the Consent Management Platform that last modified the consent string\n\nThis version number references the CMP code running when collecting the user consent.",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": "Version"
      }
    ],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "getCmpVersion",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#getCmpVersion",
    "access": "public",
    "description": "Get the verison of the Consent Management Platform that last modified the consent string",
    "lineNumber": 198,
    "return": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "setConsentScreen",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#setConsentScreen",
    "access": "public",
    "description": "Set the Consent Management Platform screen ID that collected the user consent\n\nThis screen ID references a unique view in the CMP that was displayed to the user to collect consent",
    "lineNumber": 209,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "screenId",
        "description": "Screen ID"
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "getConsentScreen",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#getConsentScreen",
    "access": "public",
    "description": "Get the Consent Management Platform screen ID that collected the user consent",
    "lineNumber": 218,
    "return": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "setConsentLanguage",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#setConsentLanguage",
    "access": "public",
    "description": "Set the language that the CMP asked the consent in",
    "lineNumber": 227,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "language",
        "description": "Two-letter ISO639-1 code (en, fr, de, etc.)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "getConsentLanguage",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#getConsentLanguage",
    "access": "public",
    "description": "Get the language that the CMP asked consent in",
    "lineNumber": 240,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Two-letter ISO639-1 code (en, fr, de, etc.)"
    },
    "params": []
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "setPurposesAllowed",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#setPurposesAllowed",
    "access": "public",
    "description": "Set the list of purpose IDs that the user has given consent to",
    "lineNumber": 249,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "purposeIds",
        "description": "An array of integers that map to the purposes defined in the vendor list. Purposes included in the array are purposes that the user has given consent to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "getPurposesAllowed",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#getPurposesAllowed",
    "access": "public",
    "description": "Get the list of purpose IDs that the user has given consent to",
    "lineNumber": 258,
    "return": {
      "nullable": null,
      "types": [
        "integer[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "setPurposeAllowed",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#setPurposeAllowed",
    "access": "public",
    "description": "Set the consent status of a user for a given purpose",
    "lineNumber": 268,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "purposeId",
        "description": "The ID (from the vendor list) of the purpose to update"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Consent status"
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "isPurposeAllowed",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#isPurposeAllowed",
    "access": "public",
    "description": "Check if the user has given consent for a specific purpose",
    "lineNumber": 289,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "purposeId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "setVendorsAllowed",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#setVendorsAllowed",
    "access": "public",
    "description": "Set the list of vendor IDs that the user has given consent to",
    "lineNumber": 298,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "vendorIds",
        "description": "An array of integers that map to the vendors defined in the vendor list. Vendors included in the array are vendors that the user has given consent to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "getVendorsAllowed",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#getVendorsAllowed",
    "access": "public",
    "description": "Get the list of vendor IDs that the user has given consent to",
    "lineNumber": 307,
    "return": {
      "nullable": null,
      "types": [
        "integer[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "setVendorAllowed",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#setVendorAllowed",
    "access": "public",
    "description": "Set the consent status of a user for a given vendor",
    "lineNumber": 317,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "vendorId",
        "description": "The ID (from the vendor list) of the vendor to update"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Consent status"
      }
    ],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "isVendorAllowed",
    "memberof": "src/consent-string.js~ConsentString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/consent-string.js~ConsentString#isVendorAllowed",
    "access": "public",
    "description": "Check if the user has given consent for a specific vendor",
    "lineNumber": 338,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "vendorId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/decode.js",
    "content": "const {\n  decodeBitsToIds,\n  decodeFromBase64,\n} = require('./utils/bits');\n\n/**\n * Decode consent data from a web-safe base64-encoded string\n *\n * @param {string} consentString\n */\nfunction decodeConsentString(consentString) {\n  const {\n    version,\n    cmpId,\n    vendorListVersion,\n    purposeIdBitString,\n    maxVendorId,\n    created,\n    lastUpdated,\n    isRange,\n    defaultConsent,\n    vendorIdBitString,\n    vendorRangeList,\n    cmpVersion,\n    consentScreen,\n    consentLanguage,\n  } = decodeFromBase64(consentString);\n\n  const consentStringData = {\n    version,\n    cmpId,\n    vendorListVersion,\n    allowedPurposeIds: decodeBitsToIds(purposeIdBitString),\n    maxVendorId,\n    created,\n    lastUpdated,\n    cmpVersion,\n    consentScreen,\n    consentLanguage,\n  };\n\n  if (isRange) {\n    /* eslint no-shadow: off */\n    const idMap = vendorRangeList.reduce((acc, { isRange, startVendorId, endVendorId }) => {\n      const lastVendorId = isRange ? endVendorId : startVendorId;\n\n      for (let i = startVendorId; i <= lastVendorId; i += 1) {\n        acc[i] = true;\n      }\n\n      return acc;\n    }, {});\n\n    consentStringData.allowedVendorIds = [];\n\n    for (let i = 0; i <= maxVendorId; i += 1) {\n      if (\n        (defaultConsent && !idMap[i]) ||\n        (!defaultConsent && idMap[i])\n      ) {\n        if (consentStringData.allowedVendorIds.indexOf(i) === -1) {\n          consentStringData.allowedVendorIds.push(i);\n        }\n      }\n    }\n  } else {\n    consentStringData.allowedVendorIds = decodeBitsToIds(vendorIdBitString);\n  }\n\n  return consentStringData;\n}\n\nmodule.exports = {\n  decodeConsentString,\n};\n",
    "static": true,
    "longname": "C:/Users/Jawad/Documents/Development/didomi/consent-string/src/decode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "decodeBitsToIds",
    "memberof": "src/decode.js",
    "static": true,
    "longname": "src/decode.js~decodeBitsToIds",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/decode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "decodeConsentString",
    "memberof": "src/decode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/decode.js~decodeConsentString",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/decode.js",
    "importStyle": null,
    "description": "Decode consent data from a web-safe base64-encoded string",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "consentString",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/encode.js",
    "content": "const {\n  encodeToBase64,\n  padRight,\n} = require('./utils/bits');\n\n/**\n * Encode a list of vendor IDs into bits\n *\n * @param {integer} maxVendorId Highest vendor ID in the vendor list\n * @param {integer[]} allowedVendorIds Vendors that the user has given consent to\n */\nfunction encodeVendorIdsToBits(maxVendorId, allowedVendorIds = []) {\n  let vendorString = '';\n\n  for (let id = 1; id <= maxVendorId; id += 1) {\n    vendorString += (allowedVendorIds.indexOf(id) !== -1 ? '1' : '0');\n  }\n\n  return padRight(vendorString, Math.max(0, maxVendorId - vendorString.length));\n}\n\n/**\n * Encode a list of purpose IDs into bits\n *\n * @param {*} purposes List of purposes from the vendor list\n * @param {*} allowedPurposeIds List of purpose IDs that the user has given consent to\n */\nfunction encodePurposeIdsToBits(purposes, allowedPurposeIds = new Set()) {\n  const maxPurposeId = Math.max(\n    0,\n    ...purposes.map(({ id }) => id),\n    ...Array.from(allowedPurposeIds),\n  );\n\n  let purposeString = '';\n\n  for (let id = 1; id <= maxPurposeId; id += 1) {\n    purposeString += (allowedPurposeIds.indexOf(id) !== -1 ? '1' : '0');\n  }\n\n  return purposeString;\n}\n\n/**\n * Convert a list of vendor IDs to ranges\n *\n * @param {object[]} vendors List of vendors from the vendor list\n * @param {integer[]} allowedVendorIds List of vendor IDs that the user has given consent to\n */\nfunction convertVendorsToRanges(vendors, allowedVendorIds) {\n  let range = [];\n\n  return vendors.reduce((acc, { id }, index) => {\n    if (allowedVendorIds.indexOf(id) !== -1) {\n      range.push(id);\n    }\n\n    // If the range has ended or at the end of vendors add entry to the list\n    if ((allowedVendorIds.indexOf(id) === -1 || index === vendors.length - 1) && range.length) {\n      const startVendorId = range.shift();\n      const endVendorId = range.pop();\n\n      range = [];\n\n      return [...acc, {\n        isRange: typeof endVendorId === 'number',\n        startVendorId,\n        endVendorId,\n      }];\n    }\n\n    return acc;\n  }, []);\n}\n\n/**\n * Encode consent data into a web-safe base64-encoded string\n *\n * @param {object} consentData Data to include in the string (see `utils/definitions.js` for the list of fields)\n */\nfunction encodeConsentString(consentData) {\n  let { maxVendorId } = consentData;\n  const { vendorList = {}, allowedPurposeIds, allowedVendorIds } = consentData;\n  const { vendors = [], purposes = [] } = vendorList;\n\n  if (!maxVendorId) {\n    // Find the max vendor ID from the vendor list if it has not been provided\n    maxVendorId = 0;\n\n    vendors.forEach((vendor) => {\n      if (vendor.id > maxVendorId) {\n        maxVendorId = vendor.id;\n      }\n    });\n  }\n\n  // Encode the data with and without ranges and return the smallest encoded payload\n  const noRangesData = encodeToBase64({\n    ...consentData,\n    maxVendorId,\n    purposeIdBitString: encodePurposeIdsToBits(purposes, allowedPurposeIds),\n    isRange: false,\n    vendorIdBitString: encodeVendorIdsToBits(maxVendorId, allowedVendorIds),\n  });\n\n  const vendorRangeList = convertVendorsToRanges(vendors, allowedVendorIds);\n  const rangesData = encodeToBase64({\n    ...consentData,\n    maxVendorId,\n    purposeIdBitString: encodePurposeIdsToBits(purposes, allowedPurposeIds),\n    isRange: true,\n    defaultConsent: false,\n    numEntries: vendorRangeList.length,\n    vendorRangeList,\n  });\n\n  return noRangesData.length < rangesData.length ? noRangesData : rangesData;\n}\n\nmodule.exports = {\n  encodeConsentString,\n};\n",
    "static": true,
    "longname": "C:/Users/Jawad/Documents/Development/didomi/consent-string/src/encode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "encodeToBase64",
    "memberof": "src/encode.js",
    "static": true,
    "longname": "src/encode.js~encodeToBase64",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/encode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "encodeVendorIdsToBits",
    "memberof": "src/encode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/encode.js~encodeVendorIdsToBits",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/encode.js",
    "importStyle": null,
    "description": "Encode a list of vendor IDs into bits",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "maxVendorId",
        "description": "Highest vendor ID in the vendor list"
      },
      {
        "nullable": null,
        "types": [
          "integer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "allowedVendorIds",
        "description": "Vendors that the user has given consent to"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "encodePurposeIdsToBits",
    "memberof": "src/encode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/encode.js~encodePurposeIdsToBits",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/encode.js",
    "importStyle": null,
    "description": "Encode a list of purpose IDs into bits",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "purposes",
        "description": "List of purposes from the vendor list"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "allowedPurposeIds",
        "description": "List of purpose IDs that the user has given consent to"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "convertVendorsToRanges",
    "memberof": "src/encode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/encode.js~convertVendorsToRanges",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/encode.js",
    "importStyle": null,
    "description": "Convert a list of vendor IDs to ranges",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "vendors",
        "description": "List of vendors from the vendor list"
      },
      {
        "nullable": null,
        "types": [
          "integer[]"
        ],
        "spread": false,
        "optional": false,
        "name": "allowedVendorIds",
        "description": "List of vendor IDs that the user has given consent to"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "encodeConsentString",
    "memberof": "src/encode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/encode.js~encodeConsentString",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/encode.js",
    "importStyle": null,
    "description": "Encode consent data into a web-safe base64-encoded string",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "consentData",
        "description": "Data to include in the string (see `utils/definitions.js` for the list of fields)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/index.js",
    "content": "const { ConsentString } = require('./consent-string');\nconst { decodeConsentString } = require('./decode');\nconst { encodeConsentString } = require('./encode');\n\nmodule.exports = {\n  ConsentString,\n  decodeConsentString,\n  encodeConsentString,\n};\n",
    "static": true,
    "longname": "C:/Users/Jawad/Documents/Development/didomi/consent-string/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "name": "ConsentString",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~ConsentString",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "decodeConsentString",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~decodeConsentString",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "encodeConsentString",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~encodeConsentString",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/utils/bits.js",
    "content": "/* eslint no-use-before-define: off */\n\nconst base64 = require('base-64');\nconst {\n  NUM_BITS_VERSION,\n  vendorVersionMap,\n} = require('./definitions');\n\nfunction repeat(count, string = '0') {\n  let padString = '';\n\n  for (let i = 0; i < count; i += 1) {\n    padString += string;\n  }\n\n  return padString;\n}\n\nfunction padLeft(string, padding) {\n  return repeat(Math.max(0, padding)) + string;\n}\n\nfunction padRight(string, padding) {\n  return string + repeat(Math.max(0, padding));\n}\n\nfunction encodeIntToBits(number, numBits) {\n  let bitString = '';\n\n  if (typeof number === 'number' && !isNaN(number)) {\n    bitString = parseInt(number, 10).toString(2);\n  }\n\n  // Pad the string if not filling all bits\n  if (numBits >= bitString.length) {\n    bitString = padLeft(bitString, numBits - bitString.length);\n  }\n\n  // Truncate the string if longer than the number of bits\n  if (bitString.length > numBits) {\n    bitString = bitString.substring(0, numBits);\n  }\n\n  return bitString;\n}\n\nfunction encodeBoolToBits(value) {\n  return encodeIntToBits(value === true ? 1 : 0, 1);\n}\n\nfunction encodeDateToBits(date, numBits) {\n  if (date instanceof Date) {\n    return encodeIntToBits(date.getTime() / 100, numBits);\n  }\n  return encodeIntToBits(date, numBits);\n}\n\nfunction encodeLetterToBits(letter, numBits) {\n  return encodeIntToBits(letter.toUpperCase().charCodeAt(0) - 65, numBits);\n}\n\nfunction encodeLanguageToBits(language, numBits = 12) {\n  return encodeLetterToBits(language.slice(0, 1), numBits / 2)\n    + encodeLetterToBits(language.slice(1), numBits / 2);\n}\n\nfunction decodeBitsToInt(bitString, start, length) {\n  return parseInt(bitString.substr(start, length), 2);\n}\n\nfunction decodeBitsToDate(bitString, start, length) {\n  return new Date(decodeBitsToInt(bitString, start, length) * 100);\n}\n\nfunction decodeBitsToBool(bitString, start) {\n  return parseInt(bitString.substr(start, 1), 2) === 1;\n}\n\nfunction decodeBitsToLetter(bitString) {\n  const letterCode = decodeBitsToInt(bitString);\n  return String.fromCharCode(letterCode + 65).toLowerCase();\n}\n\nfunction decodeBitsToLanguage(bitString, start, length) {\n  const languageBitString = bitString.substr(start, length);\n\n  return decodeBitsToLetter(languageBitString.slice(0, length / 2))\n    + decodeBitsToLetter(languageBitString.slice(length / 2));\n}\n\nfunction encodeField({ input, field }) {\n  const { name, type, numBits, encoder, validator } = field;\n\n  if (typeof validator === 'function') {\n    if (!validator(input)) {\n      return '';\n    }\n  }\n  if (typeof encoder === 'function') {\n    return encoder(input);\n  }\n\n  const bitCount = typeof numBits === 'function' ? numBits(input) : numBits;\n\n  const inputValue = input[name];\n  const fieldValue = inputValue === null || inputValue === undefined ? '' : inputValue;\n\n  switch (type) {\n    case 'int':\n      return encodeIntToBits(fieldValue, bitCount);\n    case 'bool':\n      return encodeBoolToBits(fieldValue);\n    case 'date':\n      return encodeDateToBits(fieldValue, bitCount);\n    case 'bits':\n      return padRight(fieldValue, bitCount - fieldValue.length).substring(0, bitCount);\n    case 'list':\n      return fieldValue.reduce((acc, listValue) => acc + encodeFields({\n        input: listValue,\n        fields: field.fields,\n      }), '');\n    case 'language':\n      return encodeLanguageToBits(fieldValue, bitCount);\n    default:\n      throw new Error(`ConsentString - Unknown field type ${type} for encoding`);\n  }\n}\n\nfunction encodeFields({ input, fields }) {\n  return fields.reduce((acc, field) => {\n    acc += encodeField({ input, field });\n\n    return acc;\n  }, '');\n}\n\nfunction decodeField({ input, output, startPosition, field }) {\n  const { type, numBits, decoder, validator, listCount } = field;\n\n  if (typeof validator === 'function') {\n    if (!validator(output)) {\n      // Not decoding this field so make sure we start parsing the next field at\n      // the same point\n      return { newPosition: startPosition };\n    }\n  }\n\n  if (typeof decoder === 'function') {\n    return decoder(input, output, startPosition);\n  }\n\n  const bitCount = typeof numBits === 'function' ? numBits(output) : numBits;\n\n  let listEntryCount = 0;\n  if (typeof listCount === 'function') {\n    listEntryCount = listCount(output);\n  } else if (typeof listCount === 'number') {\n    listEntryCount = listCount;\n  }\n\n  switch (type) {\n    case 'int':\n      return { fieldValue: decodeBitsToInt(input, startPosition, bitCount) };\n    case 'bool':\n      return { fieldValue: decodeBitsToBool(input, startPosition) };\n    case 'date':\n      return { fieldValue: decodeBitsToDate(input, startPosition, bitCount) };\n    case 'bits':\n      return { fieldValue: input.substr(startPosition, bitCount) };\n    case 'list':\n      return new Array(listEntryCount).fill().reduce((acc) => {\n        const { decodedObject, newPosition } = decodeFields({\n          input,\n          fields: field.fields,\n          startPosition: acc.newPosition,\n        });\n        return {\n          fieldValue: [...acc.fieldValue, decodedObject],\n          newPosition,\n        };\n      }, { fieldValue: [], newPosition: startPosition });\n    case 'language':\n      return { fieldValue: decodeBitsToLanguage(input, startPosition, bitCount) };\n    default:\n      throw new Error(`ConsentString - Unknown field type ${type} for decoding`);\n  }\n}\n\nfunction decodeFields({ input, fields, startPosition = 0 }) {\n  let position = startPosition;\n\n  const decodedObject = fields.reduce((acc, field) => {\n    const { name, numBits } = field;\n    const { fieldValue, newPosition } = decodeField({\n      input,\n      output: acc,\n      startPosition: position,\n      field,\n    });\n\n    if (fieldValue !== undefined) {\n      acc[name] = fieldValue;\n    }\n\n    if (newPosition !== undefined) {\n      position = newPosition;\n    } else if (typeof numBits === 'number') {\n      position += numBits;\n    }\n\n    return acc;\n  }, {});\n\n  return {\n    decodedObject,\n    newPosition: position,\n  };\n}\n\n/**\n * Encode the data properties to a bit string. Encoding will encode\n * either `selectedVendorIds` or the `vendorRangeList` depending on\n * the value of the `isRange` flag.\n */\nfunction encodeDataToBits(data, definitionMap) {\n  const { version } = data;\n\n  if (typeof version !== 'number') {\n    throw new Error('ConsentString - No version field to encode');\n  } else if (!definitionMap[version]) {\n    throw new Error(`ConsentString - No definition for version ${version}`);\n  } else {\n    const fields = definitionMap[version].fields;\n    return encodeFields({ input: data, fields });\n  }\n}\n\n/**\n * Take all fields required to encode the consent string and produce the URL safe Base64 encoded value\n */\nfunction encodeToBase64(data, definitionMap = vendorVersionMap) {\n  const binaryValue = encodeDataToBits(data, definitionMap);\n\n  if (binaryValue) {\n    // Pad length to multiple of 8\n    const paddedBinaryValue = padRight(binaryValue, 7 - ((binaryValue.length + 7) % 8));\n\n    // Encode to bytes\n    let bytes = '';\n    for (let i = 0; i < paddedBinaryValue.length; i += 8) {\n      bytes += String.fromCharCode(parseInt(paddedBinaryValue.substr(i, 8), 2));\n    }\n\n    // Make base64 string URL friendly\n    return base64.encode(bytes)\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=+$/, '');\n  }\n\n  return null;\n}\n\nfunction decodeConsentStringBitValue(bitString, definitionMap = vendorVersionMap) {\n  const version = decodeBitsToInt(bitString, 0, NUM_BITS_VERSION);\n\n  if (typeof version !== 'number') {\n    return {};\n  } else if (!vendorVersionMap[version]) {\n    return {};\n  }\n\n  const fields = definitionMap[version].fields;\n  const { decodedObject } = decodeFields({ input: bitString, fields });\n\n  return decodedObject;\n}\n\n/**\n * Decode the (URL safe Base64) value of a consent string into an object.\n */\nfunction decodeFromBase64(consentString, definitionMap) {\n  // Add padding\n  let unsafe = consentString;\n  while (unsafe.length % 4 !== 0) {\n    unsafe += '=';\n  }\n\n  // Replace safe characters\n  unsafe = unsafe\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const bytes = base64.decode(unsafe);\n\n  let inputBits = '';\n  for (let i = 0; i < bytes.length; i += 1) {\n    const bitString = bytes.charCodeAt(i).toString(2);\n    inputBits += padLeft(bitString, 8 - bitString.length);\n  }\n\n  return decodeConsentStringBitValue(inputBits, definitionMap);\n}\n\nfunction decodeBitsToIds(bitString) {\n  return bitString.split('').reduce((acc, bit, index) => {\n    if (bit === '1') {\n      if (acc.indexOf(index + 1) === -1) {\n        acc.push(index + 1);\n      }\n    }\n    return acc;\n  }, []);\n}\n\nmodule.exports = {\n  padRight,\n  padLeft,\n  encodeField,\n  encodeDataToBits,\n  encodeIntToBits,\n  encodeBoolToBits,\n  encodeDateToBits,\n  encodeLanguageToBits,\n  encodeLetterToBits,\n  encodeToBase64,\n  decodeBitsToIds,\n  decodeBitsToInt,\n  decodeBitsToDate,\n  decodeBitsToBool,\n  decodeBitsToLanguage,\n  decodeBitsToLetter,\n  decodeFromBase64,\n};\n",
    "static": true,
    "longname": "C:/Users/Jawad/Documents/Development/didomi/consent-string/src/utils/bits.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "base64",
    "memberof": "src/utils/bits.js",
    "static": true,
    "longname": "src/utils/bits.js~base64",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "NUM_BITS_VERSION",
    "memberof": "src/utils/bits.js",
    "static": true,
    "longname": "src/utils/bits.js~NUM_BITS_VERSION",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "repeat",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~repeat",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "string",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "0",
        "defaultValue": "0"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "padLeft",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~padLeft",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      },
      {
        "name": "padding",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "padRight",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~padRight",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      },
      {
        "name": "padding",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "encodeIntToBits",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~encodeIntToBits",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      },
      {
        "name": "numBits",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "encodeBoolToBits",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~encodeBoolToBits",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "encodeDateToBits",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~encodeDateToBits",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "date",
        "types": [
          "*"
        ]
      },
      {
        "name": "numBits",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "encodeLetterToBits",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~encodeLetterToBits",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "letter",
        "types": [
          "*"
        ]
      },
      {
        "name": "numBits",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "encodeLanguageToBits",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~encodeLanguageToBits",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "language",
        "types": [
          "*"
        ]
      },
      {
        "name": "numBits",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 12,
        "defaultValue": "12"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "decodeBitsToInt",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~decodeBitsToInt",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "bitString",
        "types": [
          "*"
        ]
      },
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "decodeBitsToDate",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~decodeBitsToDate",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "bitString",
        "types": [
          "*"
        ]
      },
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "decodeBitsToBool",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~decodeBitsToBool",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "bitString",
        "types": [
          "*"
        ]
      },
      {
        "name": "start",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "decodeBitsToLetter",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~decodeBitsToLetter",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "bitString",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "decodeBitsToLanguage",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~decodeBitsToLanguage",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "bitString",
        "types": [
          "*"
        ]
      },
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "encodeField",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~encodeField",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"input\": *, \"field\": *}"
        ],
        "defaultRaw": {
          "input": null,
          "field": null
        },
        "defaultValue": "{\"input\":null,\"field\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "encodeFields",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~encodeFields",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"input\": *, \"fields\": *}"
        ],
        "defaultRaw": {
          "input": null,
          "fields": null
        },
        "defaultValue": "{\"input\":null,\"fields\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "decodeField",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~decodeField",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"input\": *, \"output\": *, \"startPosition\": *, \"field\": *}"
        ],
        "defaultRaw": {
          "input": null,
          "output": null,
          "startPosition": null,
          "field": null
        },
        "defaultValue": "{\"input\":null,\"output\":null,\"startPosition\":null,\"field\":null}"
      }
    ],
    "return": {
      "types": [
        "{\"fieldValue\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "decodeFields",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~decodeFields",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"input\": *, \"fields\": *, \"startPosition\": *}"
        ],
        "defaultRaw": {
          "input": null,
          "fields": null,
          "startPosition": null
        },
        "defaultValue": "{\"input\":null,\"fields\":null,\"startPosition\":null}"
      }
    ],
    "return": {
      "types": [
        "{\"decodedObject\": *, \"newPosition\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "encodeDataToBits",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~encodeDataToBits",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": "Encode the data properties to a bit string. Encoding will encode\neither `selectedVendorIds` or the `vendorRangeList` depending on\nthe value of the `isRange` flag.",
    "lineNumber": 225,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "definitionMap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "encodeToBase64",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~encodeToBase64",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": "Take all fields required to encode the consent string and produce the URL safe Base64 encoded value",
    "lineNumber": 241,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "definitionMap",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "vendorVersionMap",
        "defaultValue": "vendorVersionMap"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "decodeConsentStringBitValue",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~decodeConsentStringBitValue",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "params": [
      {
        "name": "bitString",
        "types": [
          "*"
        ]
      },
      {
        "name": "definitionMap",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "vendorVersionMap",
        "defaultValue": "vendorVersionMap"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "decodeFromBase64",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~decodeFromBase64",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": "Decode the (URL safe Base64) value of a consent string into an object.",
    "lineNumber": 282,
    "params": [
      {
        "name": "consentString",
        "types": [
          "*"
        ]
      },
      {
        "name": "definitionMap",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "decodeBitsToIds",
    "memberof": "src/utils/bits.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/bits.js~decodeBitsToIds",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/bits.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 305,
    "undocument": true,
    "params": [
      {
        "name": "bitString",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "file",
    "name": "src/utils/definitions.js",
    "content": "const NUM_BITS_VERSION = 6;\n\n/**\n * Definition of the consent string encoded format\n *\n * From https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/Draft_for_Public_Comment_Transparency%20%26%20Consent%20Framework%20-%20cookie%20and%20vendor%20list%20format%20specification%20v1.0a.pdf\n */\nconst vendorVersionMap = {\n  /**\n   * Version 1\n   */\n  1: {\n    version: 1,\n    fields: [\n      { name: 'version', type: 'int', numBits: 6 },\n      { name: 'created', type: 'date', numBits: 36 },\n      { name: 'lastUpdated', type: 'date', numBits: 36 },\n      { name: 'cmpId', type: 'int', numBits: 12 },\n      { name: 'cmpVersion', type: 'int', numBits: 12 },\n      { name: 'consentScreen', type: 'int', numBits: 6 },\n      { name: 'consentLanguage', type: 'language', numBits: 12 },\n      { name: 'vendorListVersion', type: 'int', numBits: 12 },\n      { name: 'purposeIdBitString', type: 'bits', numBits: 24 },\n      { name: 'maxVendorId', type: 'int', numBits: 16 },\n      { name: 'isRange', type: 'bool', numBits: 1 },\n      {\n        name: 'vendorIdBitString',\n        type: 'bits',\n        numBits: decodedObject => decodedObject.maxVendorId,\n        validator: decodedObject => !decodedObject.isRange,\n      },\n      {\n        name: 'defaultConsent',\n        type: 'bool',\n        numBits: 1,\n        validator: decodedObject => decodedObject.isRange,\n      },\n      {\n        name: 'numEntries',\n        numBits: 12,\n        type: 'int',\n        validator: decodedObject => decodedObject.isRange,\n      },\n      {\n        name: 'vendorRangeList',\n        type: 'list',\n        listCount: decodedObject => decodedObject.numEntries,\n        validator: decodedObject => decodedObject.isRange,\n        fields: [\n          {\n            name: 'isRange',\n            type: 'bool',\n            numBits: 1,\n          },\n          {\n            name: 'startVendorId',\n            type: 'int',\n            numBits: 16,\n          },\n          {\n            name: 'endVendorId',\n            type: 'int',\n            numBits: 16,\n            validator: decodedObject => decodedObject.isRange,\n          },\n        ],\n      },\n    ],\n  },\n};\n\nmodule.exports = {\n  NUM_BITS_VERSION,\n  vendorVersionMap,\n};\n",
    "static": true,
    "longname": "C:/Users/Jawad/Documents/Development/didomi/consent-string/src/utils/definitions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "NUM_BITS_VERSION",
    "memberof": "src/utils/definitions.js",
    "static": true,
    "longname": "src/utils/definitions.js~NUM_BITS_VERSION",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/definitions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "vendorVersionMap",
    "memberof": "src/utils/definitions.js",
    "static": true,
    "longname": "src/utils/definitions.js~vendorVersionMap",
    "access": "public",
    "export": false,
    "importPath": "consent-string/src/utils/definitions.js",
    "importStyle": null,
    "description": "Definition of the consent string encoded format\n\nFrom https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/Draft_for_Public_Comment_Transparency%20%26%20Consent%20Framework%20-%20cookie%20and%20vendor%20list%20format%20specification%20v1.0a.pdf",
    "lineNumber": 8,
    "type": {
      "types": [
        "{\"1\": *}"
      ]
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "# Consent String\n\nEncode and decode web-safe base64 consent information with the IAB EU's GDPR Transparency and Consent Framework.\n\nThis library is a JavaScript reference implementation for dealing with consent strings in the IAB EU's GDPR Transparency and Consent Framework.  \nIt should be used by anyone who receives or sends consent information like vendors that receive consent data from a partner, or consent management platforms that need to encode/decode the global cookie.\n\nThe IAB specification for the consent string format is available at https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/Draft_for_Public_Comment_Transparency%20%26%20Consent%20Framework%20-%20cookie%20and%20vendor%20list%20format%20specification%20v1.0a.pdf (section \"Vendor Consent Cookie Format\").\n\n## Installation\n\n### For a browser application\n\nThe `consent-string` library is designed to be as lightweight as possible and has no external dependency when used in a client-side application.\n\nYou can install it as a standard `npm` library:\n\n```bash\nnpm install --save consent-string\n```\n\n**Note:** You will need webpack or a similar module bundler to correctly pack the library for use in a browser.\n\n### For Node.js\n\nYou can install it as a standard `npm` library:\n\n```bash\nnpm install --save consent-string\n```\n\n## Usage\n\n### Decode a consent string\n\nYou can decode a base64-encoded consent string by passing it as a parameter to the `ConsentString` constructor:\n\n```javascript\nconst { ConsentString } = require('consent-string');\n\nconst consentData = new ConsentString('BOQ7WlgOQ7WlgABABwAAABJOACgACAAQABA');\n\n// `consentData` contains the decoded consent information\n```\n\n**Note:** You do not need the IAB global vendor list for decoding a consent string as long as you know the purpose and vendor IDs you are looking for.\n\n### Encode consent data\n\n```javascript\nconst { ConsentString } = require('consent-string');\n\nconst consentData = new ConsentString();\n\n// Set the global vendor list\n// You need to download and provide the vendor list yourself\nconsentData.setGlobalVendorList(vendorList);\n\n// Set the consent data\nconsentData.setCmpId(1);\nconsentData.setCmpVersion(1);\nconsentData.setCmpScreen(1);\nconsentData.setConsentLanguage('en');\nconsentData.setPurposesAllowed([1, 2, 4]);\nconsentData.setVendorsAllowed([1, 24, 245]);\n\n// Encode the data into a web-safe base64 string\nconsentData.getConsentString();\n```\n\n## Use cases\n\n### Vendors\n\nVendors that receive a consent string encoded by a Consent Management Platform, on a webpage or in a mobile application, can decode the string and determine if they the user has given consent to their specific purpose and vendor IDs.\n\n**Example:**\n\nAssuming you are the vendor with ID 1 and want to check that the user has given consent to access her device (purpose 1) and personalize advertizing (purpose 2):\n\n```javascript\nconst { ConsentString } = require('consent-string');\n\nconst consentData = new ConsentString('encoded base64 consent string received');\n\nif (\n  consentData.isVendorAllowed(1)\n  && consentData.isPurposeAllowed(1)\n  && consentData.isPurposeAllowed(2)\n) {\n  // The vendor ID and the purposes are all allowed\n  // Process with your data collection / processing\n} else {\n  // Either the vendor or one of the purposes is not allowed by the user\n  // Do not collect or process personal data\n}\n```\n\n### Consent management platforms\n\nCMPs can read a cookie, modify its content then update the cookie value with the correct encoding.\n\n```javascript\nconst { ConsentString } = require('consent-string');\n\n// Decode the base64-encoded consent string contained in the cookie\nconst consentData = new ConsentString(readCookieValue());\n\n// Modify the consent data\nconsentData.setCmpId(1);\nconsentData.setCmpScreen(1);\nconsentData.setPurposeAllowed(12, true);\n\n// Update the cookie value\nwriteCookieValue(consentData.getConsentString());\n```\n\n**Note:** CMPs need to manage the cookie operations (reading and writing) themselves.\n\n## Documentation\n\nThe documentation for the API exposed by this library is available [here]().\n",
    "longname": "C:\\Users\\Jawad\\Documents\\Development\\didomi\\consent-string\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"consent-string\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Encode and decode web-safe base64 consent information with the IAB EU's GDPR Transparency and Consent Framework\",\n  \"homepage\": \"http://advertisingconsent.eu/\",\n  \"keywords\": [\n    \"consent\",\n    \"gdpr\",\n    \"iab\"\n  ],\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist/\"\n  ],\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"directories\": {\n    \"lib\": \"src\",\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha test/ --recursive\",\n    \"coverage\": \"nyc --reporter=html --reporter=text-summary --reporter=lcov --check-coverage --lines 100 --functions 100 --branches 100 mocha test/ --recursive\",\n    \"lint\": \"eslint src/. test/.\",\n    \"docs\": \"esdoc\",\n    \"build\": \"babel src --out-dir dist\",\n    \"release\": \"npm run build && npm publish --access public\"\n  },\n  \"dependencies\": {\n    \"base-64\": \"^0.1.0\"\n  },\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-plugin-transform-object-rest-spread\": \"^6.26.0\",\n    \"babel-preset-env\": \"^1.6.1\",\n    \"chai\": \"^4.0.2\",\n    \"coveralls\": \"^3.0.0\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^4.0.0\",\n    \"eslint-config-airbnb-base\": \"^11.2.0\",\n    \"eslint-plugin-import\": \"^2.3.0\",\n    \"eslint-plugin-mocha\": \"^4.11.0\",\n    \"mocha\": \"^3.4.2\",\n    \"nyc\": \"^11.0.2\",\n    \"sinon\": \"^4.5.0\"\n  }\n}\n",
    "longname": "C:\\Users\\Jawad\\Documents\\Development\\didomi\\consent-string\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]